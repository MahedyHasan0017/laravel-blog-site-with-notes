at first we will go to Providers folder and go to AuthServiceProvider

Gate : Gate is a basically a simple clouser that has a name , Clouser will check if certain user can perform specific action

define gate in boot method in AuthServiceProvider file
import from
use Illuminate\Support\Facades\Gate;

defining gate

public function boot(): void
{
$this->registerPolicies() ;
Gate::define('update-post',function($user , $post){
return $user->id == $post->id                       ;
}) ;
}

now going to BlogPostController and appling gate
using

$post = BlogPost::findOrFail($id) ; //finding post

if (Gate::denies('update-post', $post)) { //appling gate
abort(403,'This is abort message : you cannot update others authors posts');
}

Gate::forUser($user)->denies('update-post' , $post) ;

oposite of denies is forUser

Gate::forUser($user)->allow('update-post',$post) ;

we can use alternative of shorthand for if(Gate) block , with this

$this->authorize('update-post',$post) ;

Intercepting a Gate check ::before() method have a clouser with $user and $ability parameter

Gate::before(function($user , $ability){
    if($user->is_admin){
        //checking current logged in user is_admin or not 
        // if($user->is_admin && in_array($ability,['update-post']))
            if($user->is_admin && in_array($ability,['update-post','delete-post'])){
                return true ; 
            }                     
    }
}) ;


php artisan make:policy BlogPostPolicy //creating policy 






